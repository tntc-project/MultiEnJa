1	DIB Guide: Detecting Agile BS	DIBガイド:<ER01>Detecting Agile BS</ER01>
2	Agile is a buzzword of software development, and so <ER02>all</ER02> DoD software development projects are, almost by default, <ER03>now</ER03> declared to be “agile.” The purpose of this document is to provide guidance to DoD program executives and acquisition professionals on how to detect software projects that are really using agile development versus those that are simply waterfall or spiral development in agile clothing (“agile-scrum-fall”).	アジャイルはソフトウェア開発のバズワードなので、DoDのソフトウェア開発プロジェクトはほとんどデフォルトで"アジャイル"と宣言されています。このドキュメントの目的は、DoDのプログラムエグゼクティブと<ER04>購入プロフェッショナル</ER04>に、本当にアジャイル開発を使用しているソフトウェアプロジェクトと、<ER05>アジャイルウェアの</ER05>ウォーターフォールやスパイラル開発("agile-scrum-fall")を<ER06>検出する</ER06>方法についてのガイダンスを提供することです。
3	Principles, Values, and Tools	原則・価値・ツール
4	Experts and devotees profess certain key “values” to characterize the culture and approach of agile development. <ER08>In its work,</ER08> the DIB has developed its own guiding maxims that roughly map to these true agile values:	専門家と信奉者は、アジャイル開発の文化とアプローチを特徴づけるために、特定の重要な「価値」を公言して<ER07>いる</ER07>。DIBは、そのの中で、これらの真のアジャイル価<ER12></ER12>値に<ER09>大まかに</ER09>対応する独自の<ER10>指針</ER10>を開発<ER11>した</ER11>。
5	Agile value	アジャイルの価値
6	Individuals and interactions over processes and tools	プロセスとツールを通じた個人と相互作用
7	Working software over comprehensive documentation	包括的なドキュメントよりも実用的なソフトウェア
8	Customer collaboration over contract negotiation	契約交渉における顧客とのコラボレーション
9	Responding to change over following a plan	<ER13>計画変更への対応</ER13>
10	DIB maxim	DIBの<ER14>原理</ER14>
11	“Competence trumps process”	「能力がプロセスに勝る」
12	“Minimize time from program launch to deployment of simplest useful functionality”	「プログラムの起動から最もシンプルで便利な機能の導入までの時間を最小限に抑える」
13	“Adopt a DevSecOps culture for software systems”	「ソフトウェアシステムにDevSecOps文化を取り入れる」
14	<ER15>“</ER15>Software programs should start small, be iterative, and build on success ‒ or be terminated quickly<ER16>”</ER16>	ソフトウェア・プログラムは小規模なものから開始し、反復して成功に基づいて構築するか、迅速に終了する必要が<ER17>あります。</ER17>
15	Key flags that a project is not really agile:	プロジェクトが本当にアジャイルでないことを示す重要なフラグ:
16	Nobody on the software development team <ER19>is talking with and observing the users of the software in action;</ER19> <ER20>we mean the actual users of the actual code</ER20><ER21>.</ER21>14 (The PEO does not count as an actual user, nor does the commanding officer, unless she uses the code.)	ソフトウェア開発チームの誰も、<ER18>実際のコードの実際のユーザーを意味します</ER18>14(PEOはコードを使用しない限り、実際のユーザーとしてカウントされず、司令官もカウントされません)。
17	Continuous feedback from users to the development team (bug reports, users assessments) is not available. Talking once at the beginning of a program to verify requirements doesn't count!	<ER23>ユーザ</ER23>から開発チームへの継続的なフィードバック(バグレポート、<ER24>ユーザ</ER24>評価)は利用できません。プログラムの最初に一度だけ話して、要件を<ER25>検証</ER25>することは意味がありません<ER26>!</ER26>
18	Meeting requirements is treated as more important than getting something useful into the field as quickly as possible.	要件を満たすことは、何か有用なものをできるだけ早く現場に持ち込むことよりも重要である<ER27>と</ER27>扱わ<ER28>れる</ER28>。
19	Stakeholders (dev, test, ops, security, contracting, contractors, end-users, etc.)15 are acting more-or-less autonomously (e.g., ‘it's not my job.')	利害関係者(開発、テスト、運用、セキュリティ、契約、請負業者、エンドユーザーなど)15人が多かれ少なかれ自律的に行動して<ER29>いる</ER29>(例:「私の仕事ではない」)。
20	End users of the software are missing-in-action throughout development; at a minimum they should be present during Release Planning and User Acceptance Testing.	ソフトウェアの<ER30>エンドユーザ</ER30>は、開発を<ER31>通じて</ER31><ER32>アクションが欠落しています</ER32>。少なくとも、リリース計画と<ER33>ユーザ</ER33>受け入れテストの際には<ER34>存在する</ER34>必要があります。
21	14 Acceptable substitutes for talking to users: Observing users working, putting prototypes in front of them for feedback, <ER38>and</ER38> other aspects of user research that involve less talking.	14<ER41></ER41>ユーザーと話をする代わりに受け入れられる<ER35>もの</ER35>:<ER40>ユーザー:</ER40>ユーザーが作業している様子を<ER36>観察し</ER36>、フィードバックのためにプロトタイプをユーザーの前に<ER37>置き</ER37>、<ER39>少ない</ER39>ユーザー調査の他の側面。
22	15 Dev is <ER47>short</ER47> for development, ops is short for operations	15<ER42></ER42><ER43>開発</ER43>は<ER44>開発</ER44>、<ER45>運用</ER45>は<ER46>運用</ER46>の略
23	DevSecOps culture is lacking if manual processes are tolerated when such processes can and should be automated (e.g., automated testing, continuous integration, continuous delivery).	DevSecOpsの<ER48>培養</ER48>は<ER54>,</ER54>手作業によるプロセスが自動化でき<ER49>,</ER49>かつ自動化すべき場合(例<ER50>,</ER50>自動検査<ER51>,</ER51>継続的インテグレーション<ER52>,</ER52>継続的デリバリ)には<ER53>,</ER53>そのようなプロセスが許容されるのであれば<ER55>,</ER55>欠如して<ER56>いる</ER56>。
24	<ER59>Some</ER59> <ER57>current</ER57>, common tools in use by teams using agile development (<ER60>these will</ER60> change as better tools become available):16	アジャイル開発を使用するチームが使用している<ER77>,</ER77>現在の一般的なツール<ER58>の一部</ER58>(より良いツールが利用可能になるにつれて変化する):16
25	Git, ClearCase, or Subversion - version control system for tracking changes to source code. Git is the <ER63>de facto</ER63> open source standard for modern software development.	Git、ClearCase、またはSubversion-ソースコードの変更を追跡するためのバージョン管理システム。Gitは、現代のソフトウェア開発における<ER61>事実上の</ER61>オープンソース<ER62>標準</ER62>です。
26	BitBucket or GitHub - Repository hosting sites. Also provide issues tracking, continuous integration “apps” and other productivity tools. Widely used by the open source community.	BitBucketまたはGitHub-リポジトリホスティングサイト。また、問題追跡、<ER64>継続的統合</ER64>「<ER65>アプリケーション</ER65>」、およびその他の生産性ツールも提供します。オープンソースコミュニティで広く使用されています。
27	Jenkins, Circle CI or Travis CI - continuous integration service used to build and test BitBucket and GitHub software projects	Jenkins<ER66>,</ER66>Circle CI<ER67>,</ER67>Travis CI-BitBucketとGitHubのソフトウェアプロジェクトのビルドとテストに使われる継続的インテグレーションサービス
28	Chef, Ansible, or Puppet - software for writing system configuration “recipes” and streamlining the task of configuring and maintaining a collection of servers	Chef、Ansible、またはPuppet-システム構成の「レシピ」を作成し、サーバの集合の設定と維持のタスクを合理化するソフトウェア
29	Docker - computer program that performs operating-system-level virtualization, also known as “containerization”	Docker-オペレーティングシステムレベルの仮想化を実行するコンピュータプログラムで、「コンテナ化」とも呼ば<ER76>れる</ER76><ER68>。</ER68>
30	Kubernetes or Docker Swarm for Container orchestration	コンテナオーケストレーションのためのKubernetesまたはDocker Swarm
31	Jira or Pivotal Tracker - issues reporting, tracking, and management	JiraまたはPivotal Tracker:レポート<ER69>作成</ER69>、追跡、管理の問題
32	Graphical version:	グラフィカルバージョン:
33	Questions to Ask Programming Teams	プログラミングチームへの質問
34	16 Tools listed/shown here are for illustration only: no endorsement implied.	16<ER70></ER70>ここに記載/表示されているツールは単なる例示であり、推奨事項<ER71>は含まれていません</ER71>。
35	<ER75>How</ER75> do you test your code? (Wrong answers: “we have a testing organization,” “OT&E is responsible for testing”)	<ER72>コードやって</ER72>コードをテスト<ER73>するのか</ER73><ER74>?</ER74>(間違った答え:「テスト組織がある」、「テストはOT&Eが担当」)
36	Advanced version: <ER79>what</ER79> tool suite are you using for unit tests, regression testing, functional tests, security scans, and deployment certification?	上級バージョン:単体テスト、リグレッションテスト、機能テスト、セキュリティスキャン、および導入認定に使用しているツールスイートは<ER78>どれですか</ER78><ER80>?</ER80>
37	How automated are your development, testing, security, and deployment pipelines?	開発、テスト、セキュリティ、および導入パイプラインはどのように自動化されていますか。
38	Advanced version: what tool suite are you using for continuous integration (CI), continuous deployment (CD), regression testing, program documentation; is your infrastructure defined by code?	<ER81>拡張バージョン</ER81>:継続的インテグレーション(CI)、継続的<ER82>デプロイメント</ER82>(CD)、リグレッションテスト、プログラムドキュメントにどのツールスイートを使用していますか<ER83>?</ER83>インフラストラクチャはコードで定義されていますか<ER84>?</ER84>
39	Who are your users and how are you interacting with them?	ユーザーは誰ですか<ER85>?</ER85>また、ユーザーとどのようにやり取りしていますか<ER86>?</ER86>
40	Advanced version: what mechanisms are you using to get direct feedback from your users? What tool suite are you using for issue reporting and tracking? How do you allocate issues to programming teams? How to you inform users that their issues <ER92>are being addressed and/or</ER92> have been resolved?	<ER87>拡張バージョン</ER87>:ユーザーから直接フィードバックを得るためにどのようなメカニズムを使用していますか<ER88>?</ER88>問題のレポートと追跡にどのような<ER89>ツール・スイート</ER89>を使用していますか<ER90>?</ER90><ER91>プログラミング・チーム</ER91>に問題をどのように割り当てていますか<ER93>?</ER93>ユーザーに問題が解決されていることをどのように通知していますか<ER94>?</ER94>
41	What is your (current and future) cycle time for releases to your users?	ユーザーに対するリリースの(現在および将来の)サイクル・タイムはどのくらいですか。
42	Advanced version: <ER100>what</ER100> software platforms to you support? Are you using containers? What configuration management tools do you use?	<ER95>拡張バージョン</ER95>:サポートする<ER96>ソフトウェア・プラットフォーム</ER96><ER97>コンテナ</ER97><ER98>を使用していますか</ER98><ER99>?</ER99>使用している構成管理ツールは<ER101>何</ER101>ですか?
43	Questions for Program Management	プログラム管理に関する質問
44	How many programmers are part of the organizations that owns the budget and milestones for the program? (Wrong answers: “we don't know,” “zero,” “it depends on how you define a programmer”)	プログラムの予算とマイルストーンを所有する組織には、何人のプログラマが<ER102>含まれて</ER102>いますか<ER103>?</ER103>(間違った答え:「分からない」、「<ER104>0</ER104>」、「プログラマ<ER105>の定義</ER105>に依存する」)
45	What are your management metrics for development and operations; how are they used to inform priorities, detect problems; how often are they accessed and used by leadership?	開発と運用に関する管理指標はどのようなものですか。優先順位の通知や問題の検出にどのように使用されていますか。また、リーダーシップによってどの程度の頻度でアクセスされ、使用されていますか。
46	What have you learned in your past three sprint cycles and what did you do <ER106>about it</ER106>? (Wrong answers: “what's a sprint cycle?,” “we are waiting to get approval from management”)	過去3回のスプリントサイクルで何を学び、何をしましたか?(間違った答え:「スプリントサイクルとは何ですか<ER107>?</ER107>」、「経営陣の承認を待っています」)
47	Who are the users that you deliver value to each sprint cycle? Can we talk to them? (Wrong answers: “we don't directly deploy our code to users”)	各スプリントサイクルに価値を提供するユーザーは誰ですか<ER108>?</ER108>彼らと話ができますか<ER109>?</ER109>(間違った答え:"コードをユーザーに直接配布しない")
48	Questions for Customers and Users	<ER110>お客様</ER110>とユーザーへの質問
49	How do you communicate with the developers? Did they observe your relevant teams working and ask questions that indicated a deep understanding of your needs? When is the last time they <ER113>sat with you</ER113> and talked about features you would like to see implemented?	開発者とはどのようにコミュニケーションを取っていますか<ER111>?</ER111>彼らはあなたの関連するチームが作業しているのを見て、あなたのニーズを深く理解していることを示す質問をしましたか<ER112>?</ER112>彼らが最後にあなたと話し合い、あなたが実装<ER114>したい</ER114>機能について話したのはいつですか<ER115>?</ER115>
50	How do you send in suggestions for new features or report issues or bugs in the code? What type of feedback do you get to your requests/reports? Are you ever <ER118>asked to</ER118> try prototypes of new software features and observed using them?	新しい機能の提案や、コードの問題やバグを報告するにはどうすればよいでしょうか<ER116>?</ER116>要求や報告に対してどのようなフィードバックが得られますか<ER117>?</ER117>新しいソフトウェア機能のプロトタイプを試してみて、それを使って観察したことがありますか?
51	What is the time it takes for a requested feature to show up in the application?	要求された機能がアプリケーションに表示されるまでにかかる時間はどのくらいですか。
52	Questions for Program Leadership	<ER119>プログラムのリーダーシップに関する</ER119>質問
53	Are teams delivering working software to at least some subset of real users every iteration (including the first) and gathering feedback? (alt: every two weeks)	チームは<ER120>,</ER120>少なくとも一部の実<ER121>ユーザ</ER121>に対して<ER122>,</ER122>イテレーション毎(<ER123>最初のものも</ER123>含む)に<ER124>作業用</ER124>ソフトウェアを提供し<ER125>,</ER125>フィードバックを集めて<ER126>いるのだろうか</ER126><ER127>?</ER127>(alt:2週間毎)
54	Is there a product charter that lays out the mission and strategic goals? Do all members of the team understand both, and are they able to see how their work contributes to both?	ミッションと戦略目標を<ER128>定めた</ER128>製品憲章が<ER129>あるか</ER129><ER130>?</ER130>チームの全員が両方を理解しており、自分たちの仕事がどのように両方に貢献しているかを<ER131>見る</ER131>ことが<ER132>できるか</ER132><ER133>?</ER133>
55	Is feedback from users turned into concrete work items for sprint teams on timelines shorter than one month?	ユーザーからのフィードバックは、スプリントチームの具体的な作業項目に1ヶ月未満のタイムラインで反映されていますか<ER134>?</ER134>
56	Are teams empowered to change the requirements based on user feedback?	チームは<ER135></ER135>ユーザーフィードバックに基づいて要件を変更する権限を与えられて<ER136>いるか</ER136><ER137>?</ER137>
57	Are teams empowered to change their process based on what they learn?	チームは<ER138></ER138>学んだことに基づいてプロセスを変える権限を与えられて<ER139>いるのか</ER139><ER140>?</ER140>
58	Is the full ecosystem of your project agile? (Agile programming teams followed by linear, bureaucratic deployment is a failure.<ER144>)</ER144>	あなたのプロジェクトの<ER141>完全な</ER141>エコシステムはアジャイルなのでしょうか<ER142>?</ER142>(アジャイルプログラミングチームの後に、直線的で官僚的な<ER143>デプロイメント</ER143>が続くのは失敗です。
59	For a team working on agile, the answer to all of these questions should be “yes.”	アジャイルに取り組むチームにとって、これらの質問に対する答えはすべて「イエス」であるべきです。
60	Graphical version:	グラフィカルバージョン:
61	<ER145>More information</ER145> on some of the features of DoD software programs are included in the DIB's “Ten Commandments of Software,” the DIB's “Metrics for Software Development,” and the DIB's “Do's and Don'ts of Software.”	DoDソフトウェアプログラムのいくつかの機能については、DIBの「<ER146>Ten Commandments of Software</ER146>」、DIBの「<ER147>Metrics for Software Development</ER147>」、およびDIBの「<ER148>Do's and Don'ts of Software</ER148>」<ER149>を参照してください</ER149>。
