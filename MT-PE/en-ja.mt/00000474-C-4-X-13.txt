DIBガイド:Detecting Agile BS
アジャイルはソフトウェア開発のバズワードなので、DoDのソフトウェア開発プロジェクトはほとんどデフォルトで"アジャイル"と宣言されています。このドキュメントの目的は、DoDのプログラムエグゼクティブと購入プロフェッショナルに、本当にアジャイル開発を使用しているソフトウェアプロジェクトと、アジャイルウェアのウォーターフォールやスパイラル開発("agile-scrum-fall")を検出する方法についてのガイダンスを提供することです。
原則・価値・ツール
専門家と信奉者は、アジャイル開発の文化とアプローチを特徴づけるために、特定の重要な「価値」を公言している。DIBは、そのの中で、これらの真のアジャイル価値に大まかに対応する独自の指針を開発した。
アジャイルの価値
プロセスとツールを通じた個人と相互作用
包括的なドキュメントよりも実用的なソフトウェア
契約交渉における顧客とのコラボレーション
計画変更への対応
DIBの原理
「能力がプロセスに勝る」
「プログラムの起動から最もシンプルで便利な機能の導入までの時間を最小限に抑える」
「ソフトウェアシステムにDevSecOps文化を取り入れる」
ソフトウェア・プログラムは小規模なものから開始し、反復して成功に基づいて構築するか、迅速に終了する必要があります。
プロジェクトが本当にアジャイルでないことを示す重要なフラグ:
ソフトウェア開発チームの誰も、実際のコードの実際のユーザーを意味します14(PEOはコードを使用しない限り、実際のユーザーとしてカウントされず、司令官もカウントされません)。
ユーザから開発チームへの継続的なフィードバック(バグレポート、ユーザ評価)は利用できません。プログラムの最初に一度だけ話して、要件を検証することは意味がありません!
要件を満たすことは、何か有用なものをできるだけ早く現場に持ち込むことよりも重要であると扱われる。
利害関係者(開発、テスト、運用、セキュリティ、契約、請負業者、エンドユーザーなど)15人が多かれ少なかれ自律的に行動している(例:「私の仕事ではない」)。
ソフトウェアのエンドユーザは、開発を通じてアクションが欠落しています。少なくとも、リリース計画とユーザ受け入れテストの際には存在する必要があります。
14ユーザーと話をする代わりに受け入れられるもの:ユーザー:ユーザーが作業している様子を観察し、フィードバックのためにプロトタイプをユーザーの前に置き、少ないユーザー調査の他の側面。
15開発は開発、運用は運用の略
DevSecOpsの培養は,手作業によるプロセスが自動化でき,かつ自動化すべき場合(例,自動検査,継続的インテグレーション,継続的デリバリ)には,そのようなプロセスが許容されるのであれば,欠如している。
アジャイル開発を使用するチームが使用している,現在の一般的なツールの一部(より良いツールが利用可能になるにつれて変化する):16
Git、ClearCase、またはSubversion-ソースコードの変更を追跡するためのバージョン管理システム。Gitは、現代のソフトウェア開発における事実上のオープンソース標準です。
BitBucketまたはGitHub-リポジトリホスティングサイト。また、問題追跡、継続的統合「アプリケーション」、およびその他の生産性ツールも提供します。オープンソースコミュニティで広く使用されています。
Jenkins,Circle CI,Travis CI-BitBucketとGitHubのソフトウェアプロジェクトのビルドとテストに使われる継続的インテグレーションサービス
Chef、Ansible、またはPuppet-システム構成の「レシピ」を作成し、サーバの集合の設定と維持のタスクを合理化するソフトウェア
Docker-オペレーティングシステムレベルの仮想化を実行するコンピュータプログラムで、「コンテナ化」とも呼ばれる。
コンテナオーケストレーションのためのKubernetesまたはDocker Swarm
JiraまたはPivotal Tracker:レポート作成、追跡、管理の問題
グラフィカルバージョン:
プログラミングチームへの質問
16ここに記載/表示されているツールは単なる例示であり、推奨事項は含まれていません。
コードやってコードをテストするのか?(間違った答え:「テスト組織がある」、「テストはOT&Eが担当」)
上級バージョン:単体テスト、リグレッションテスト、機能テスト、セキュリティスキャン、および導入認定に使用しているツールスイートはどれですか?
開発、テスト、セキュリティ、および導入パイプラインはどのように自動化されていますか。
拡張バージョン:継続的インテグレーション(CI)、継続的デプロイメント(CD)、リグレッションテスト、プログラムドキュメントにどのツールスイートを使用していますか?インフラストラクチャはコードで定義されていますか?
ユーザーは誰ですか?また、ユーザーとどのようにやり取りしていますか?
拡張バージョン:ユーザーから直接フィードバックを得るためにどのようなメカニズムを使用していますか?問題のレポートと追跡にどのようなツール・スイートを使用していますか?プログラミング・チームに問題をどのように割り当てていますか?ユーザーに問題が解決されていることをどのように通知していますか?
ユーザーに対するリリースの(現在および将来の)サイクル・タイムはどのくらいですか。
拡張バージョン:サポートするソフトウェア・プラットフォームコンテナを使用していますか?使用している構成管理ツールは何ですか?
プログラム管理に関する質問
プログラムの予算とマイルストーンを所有する組織には、何人のプログラマが含まれていますか?(間違った答え:「分からない」、「0」、「プログラマの定義に依存する」)
開発と運用に関する管理指標はどのようなものですか。優先順位の通知や問題の検出にどのように使用されていますか。また、リーダーシップによってどの程度の頻度でアクセスされ、使用されていますか。
過去3回のスプリントサイクルで何を学び、何をしましたか?(間違った答え:「スプリントサイクルとは何ですか?」、「経営陣の承認を待っています」)
各スプリントサイクルに価値を提供するユーザーは誰ですか?彼らと話ができますか?(間違った答え:"コードをユーザーに直接配布しない")
お客様とユーザーへの質問
開発者とはどのようにコミュニケーションを取っていますか?彼らはあなたの関連するチームが作業しているのを見て、あなたのニーズを深く理解していることを示す質問をしましたか?彼らが最後にあなたと話し合い、あなたが実装したい機能について話したのはいつですか?
新しい機能の提案や、コードの問題やバグを報告するにはどうすればよいでしょうか?要求や報告に対してどのようなフィードバックが得られますか?新しいソフトウェア機能のプロトタイプを試してみて、それを使って観察したことがありますか?
要求された機能がアプリケーションに表示されるまでにかかる時間はどのくらいですか。
プログラムのリーダーシップに関する質問
チームは,少なくとも一部の実ユーザに対して,イテレーション毎(最初のものも含む)に作業用ソフトウェアを提供し,フィードバックを集めているのだろうか?(alt:2週間毎)
ミッションと戦略目標を定めた製品憲章があるか?チームの全員が両方を理解しており、自分たちの仕事がどのように両方に貢献しているかを見ることができるか?
ユーザーからのフィードバックは、スプリントチームの具体的な作業項目に1ヶ月未満のタイムラインで反映されていますか?
チームはユーザーフィードバックに基づいて要件を変更する権限を与えられているか?
チームは学んだことに基づいてプロセスを変える権限を与えられているのか?
あなたのプロジェクトの完全なエコシステムはアジャイルなのでしょうか?(アジャイルプログラミングチームの後に、直線的で官僚的なデプロイメントが続くのは失敗です。
アジャイルに取り組むチームにとって、これらの質問に対する答えはすべて「イエス」であるべきです。
グラフィカルバージョン:
DoDソフトウェアプログラムのいくつかの機能については、DIBの「Ten Commandments of Software」、DIBの「Metrics for Software Development」、およびDIBの「Do's and Don'ts of Software」を参照してください。
