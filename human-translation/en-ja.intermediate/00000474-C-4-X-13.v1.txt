DIBガイド: 偽のアジャイルの見分け方
アジャイルとは、ソフトウェア開発におけるバズワードであり、そのため、すべての国防総省のソフトウェア開発プロジェクトは、ほぼデフォルトで「アジャイル」であると宣言されています。この文書の目的は、国防総省のプログラム幹部や調達専門官に、真のアジャイル開発を採用しているソフトウェアプロジェクトと、アジャイルを装った単なるウォーターフォールやスパイラル開発のソフトウェアプロジェクト（“agile-scrum-fall”）を見分ける方法についてガイダンスを提供することです。
原則、価値、ツール
専門家や支持者は、アジャイル開発の文化とアプローチを特徴づける特定の重要な「価値」を宣言しています。DIBはその活動において、真のアジャイルの価値とほぼ一致する独自の指針を策定しました。
アジャイルの価値
プロセスやツールよりも個人と対話
包括的なドキュメントよりも動くソフトウェア
契約交渉よりも顧客との協調
計画に従うことよりも変化への対応
DIBの指針
「能力はプロセスに勝る」
「プログラムの立ち上げから、最もシンプルで便利な機能の導入までの時間を短縮する」
「ソフトウェアシステムにDevSecOpsの文化を取り入れる」
「ソフトウェアプログラムは小規模な構成から始め、反復し、成功を積み上げるべきであり、そうでなければ速やかに終了すべきである」
プロジェクトが真のアジャイルでないことを示す重要なフラグ:
ソフトウェア開発チームが、実際のソフトウェアのユーザーと話したり、その様子を観察したりしていない。ユーザーとは、実際のコードを使用する実際のユーザーを意味する14（PEOや、コードを使用しない司令官は、実際のユーザーとして含まない）。
ユーザーから開発チームへの継続的なフィードバック（バグレポート、ユーザー評価）が利用可能な状態でない。プログラムの最初に要件を確認するために一度だけ話すことは、これに含まない。
要件を満たすことが、有用なものを現場にできる限り早く導入することよりも重要視されている。
ステークホルダー（開発、テスト、運用、セキュリティ、契約者、請負者、エンドユーザーなど）15がほぼ独立して行動している（「自分の仕事ではない」など）。
ソフトウェアのエンドユーザーが、開発中に存在しない。少なくとも、リリース計画とユーザー受け入れテストには存在する必要がある。
14ユーザーとの会話の代替として容認できるもの: ユーザーが作業している様子の観察、プロトタイプの提供によるフィードバックの回収、会話をあまり伴わないその他のユーザー調査
15 Devは開発の略であり、Opsは運用の略である
DevSecOpsの文化が欠如している。プロセスを自動化できる場合や自動化する必要がある場合に（自動テスト、継続的インテグレーション、継続的デリバリーなど）、手動プロセスが黙認されている。
現在、アジャイル開発を採用しているチームが一般的に使用しているツール（より優れたツールが利用可能になれば、ツールは変更されます）:16
Git、ClearCase、Subversion – ソースコードの変更を追跡するためのバージョン管理システム。Gitは、最新のソフトウェア開発の事実上のオープンソース標準である。
BitBucket、GitHub - リポジトリのホスティングサイト。また、課題追跡、継続的インテグレーション「アプリ」、その他の生産性向上ツールも提供している。オープンソースコミュニティで広く使用されている。
Jenkins、Circle CI、Travis CI - BitBucketやGitHubソフトウェアプロジェクトの構築とテストに使用される継続的インテグレーションサービス
Chef、Ansible、Puppet - システム構成の「レシピ」を作成し、サーバ群の構成と保守作業を効率化するソフトウェア
Docker - オペレーティングシステムレベルの仮想化を実行するコンピュータプログラムであり、「コンテナリゼーション」としても知られる
コンテナオーケストレーション用のKubernetes、Docker Swarm
Jira、Pivotal Tracker - 課題の報告、追跡、管理
グラフィカル版:
プログラミングチームへの質問
16ここに記載/表示されているツールは、説明のみを目的としており、推奨を意味するものではない。
コードをどのようにテストしていますか？(良くない回答:「テスト専用の部門があります」、「OT&Eがテストを担当しています」)
上級編: ユニットテスト、リグレッションテスト、機能テスト、セキュリティスキャン、デプロイ認証などにどのようなツール郡を使用していますか？
開発、テスト、セキュリティ、デプロイのパイプラインはどの程度自動化されていますか？
上級編: 継続的インテグレーション（CI）、継続的デプロイメント（CD）、リグレッションテスト、プログラムドキュメンテーションにどのようなツール群を使用していますか？インフラはコードで定義されていますか？
あなたのユーザーは誰ですか？ユーザーとどのように対話していますか？
上級編: ユーザーから直接フィードバックを得るために、どのような仕組みを利用していますか？課題の報告と追跡にどのようなツール群を使用していますか？課題をプログラミングチームにどのように割り当てていますか？課題が対処された、または解決されたことをどのようにユーザーに伝えていますか？
ユーザーに提供するリリースサイクル（現在と将来）はどのくらいですか？
上級編: サポートしているソフトウェアプラットフォームは何ですか？コンテナを使用していますか？構成管理ツールには何を使用していますか？
プログラム管理者への質問
プログラムの予算やマイルストーンを担っている組織には、何人のプログラマーが所属していますか？(良くない回答: 「わからない」、「いない」、「プログラマーの定義による」）
開発と運用の管理指標は何ですか？その管理指標は、優先順位の通知や問題の検出の際にどのように使用されていますか？その管理指標を、リーダーはどのくらいの頻度で利用していますか？
過去3回のスプリントサイクルで何を学び、それに対し何を実施しましたか？(良くない回答: 「スプリントサイクルとは何ですか？」「経営陣の承認を待っているところです」）
スプリントサイクルごとに価値を提供するユーザーは誰ですか？彼らと話すことはできますか？（良くない回答: 「ユーザーにコードを直接デプロイすることはありません。」）
顧客とユーザーへの質問
開発者とどのようにコミュニケーションをとっていますか？開発チームはあなたの関連チームの作業を観察し、ニーズを十分に理解するための質問をしましたか？実装を望んでいる機能について最後に開発チームと話したのはいつですか？
新機能の提案やコード上の問題やバグの報告をどのように送りますか？要望や報告に対して開発チームからどのようなフィードバックがありますか？新機能のプロトタイプを試し、それを使用している様子が観察されることはありますか？
要望した機能がアプリケーションに反映されるまでどのくらい時間がかかりますか？
プログラムリーダーへの質問
イテレーションごと(最初のイテレーションも含む)に、実際のユーザー(少なくともユーザの一部)に実際に動作するソフトウェアを提供し、フィードバックを収集していますか？(例: 2週間ごと)
ミッションと戦略目標に沿った製品憲章がありますか？チームのすべてのメンバーが、ミッションと戦略目標を理解し、それに対して自分の仕事がどのように貢献しているかを確認できますか？
ユーザーからのフィードバックは、スプリントチームの1ヶ月以内の具体的な作業アイテムに反映されていますか？
ユーザーのフィードバックに基づいて要件を変更する権限がチームに与えられていますか？
チームは学んだことに基づいてプロセスを変更する権限を与えられていますか？
プロジェクトのエコシステム全体がアジャイルになっていますか？(アジャイルなプログラミングチームの後に、直線的で官僚的なデプロイが続いては、失敗である)
アジャイルに取り組むチームは、これらの質問に対する回答がすべて「イエス（肯定）」でなければなりません。
グラフィカル版:
DoDソフトウェアプログラムのいくつかの機能についての詳しい情報は、DIBの「Ten Commandments of Software」、DIBの「Metrics for Software Development」、DIBの「Do's and Don'ts of Software」に記載されています。
